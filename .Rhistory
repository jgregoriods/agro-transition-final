p3k14c_data
write.csv(p3k14c_data, "p3k14c.csv")
library(pastclim)
download_dataset(dataset = "Krapp2021")
get_downloaded_datasets()
help("Beyer2020")
help("Krapp2021")
help("Barreto2023")
get_vars_for_dataset(dataset = "Barreto2023")
r <- raster(region_slice(-11000, bio_variables = "bio01", dataset="Barreto2023"))
r <- rast(region_slice(-11000, bio_variables = "bio01", dataset="Barreto2023"))
download_dataset(dataset = "Barreto2023")
r <- rast(region_slice(-11000, bio_variables = "bio01", dataset="Barreto2023"))
plot(r)
r <- rast(region_slice(-11000, bio_variables = "bio01", dataset="Krapp2021"))
plot(r)
# Install and load spatstat package
install.packages("spatstat")
library(spatstat)
# Load example dataset
data(cells)
# Fit a point process model (homogeneous Poisson process)
fit <- ppm(cells, ~1)
# Generate an envelope around the K-function
envel <- envelope(cells, Kest, nsim=39, rank=1)
# Plot the envelope
plot(envel)
envel$lo
Kest(cells)
obs_k <- Kest(cells)
obs_k
cells
update.packages(ask = FALSE, checkBuilt = TRUE)
library(terra)
library(terra)
f <- list.files("sel_rasters", full.names=T, pattern=".tif$")
dem <- rast("sel_rasters/cropped_dem.tif")
for (file in f) { x <- rast(file); x <- project(x, dem); writeRaster(x, paste0("proj_rasters/", names(x), ".tif")); rm(x); gc() }
f
basename(f)
for (file in f) { x <- rast(file); x <- project(x, dem); writeRaster(x, paste0("proj_rasters/", basename(file))); rm(x); gc() }
f <- list.files("proj_rasters", full.names=T)
f
r <- rast(f)
plot(r)
names(r)
unique(names(r))
plot(r[[6]])
plot(r[[21]])
names(r[[21]]) <- "twi"
plot(r[[21]])
r[[21]]
writeRaster(r[[21]], "proj_rasters/twi.tif")
f <- list.files("proj_rasters", full.names=T)
r <- rast(f)
plot(r)
names(r)
a <- read.csv("pts.csv")
a
head(a)
head(a, header=NULL)
read.csv("pts.csv", header=NULL)
a <- read.csv("pts.csv")
a
head(a)
library(sf)
pts <- st_as_sf(a)
pts <- st_as_sf(a, coords = c("x", "y"))
pts
plot(pts)
library(gstat)
vgm <- variogram(z~1, pts)
plot(vgm)
fit <- fit.variogram(vgm, vgm(6, c("Exp", "Sph", "Gau"), 50, 0))
plot(vgm, fit)
site_bound <- vect("data/shp/site_bound.shp")
library(terra)
site_bound <- vect("~/projects/caldeirao/data/shp/site_bound.shp")
# grid for interpolation
xrange <- seq(ext(site_bound)[1], ext(site_bound)[2], 1)
yrange <- seq(ext(site_bound)[3], ext(site_bound)[4], 1)
zrange <- seq(10,90,20)
site_grid <- expand.grid(xrange, yrange, zrange)
colnames(site_grid) <- c("x", "y", "z")
site_grid <- st_as_sf(site_grid, coords=c("x", "y", "z"), crs=st_crs(site_bound))
plot(site_grid)
site_bound <- vect("~/projects/caldeirao/data/shp/site_bound.shp")
# grid for interpolation
xrange <- seq(ext(site_bound)[1], ext(site_bound)[2], 1)
yrange <- seq(ext(site_bound)[3], ext(site_bound)[4], 1)
site_grid <- expand.grid(xrange, yrange)
colnames(site_grid) <- c("x", "y")
site_grid <- st_as_sf(site_grid, coords=c("x", "y"), crs=st_crs(site_bound))
plot(site_grid)
krig <- krige(z~1, pts, site_grid, fit)
st_crs(pts)
st_crs(pts) <- st_crs(site_grid)
krig <- krige(z~1, pts, site_grid, fit)
krig
plot(krig)
r <- rast(krig$var1.pred)
krig$var1.pred
r <- rast(site_grid)
r
plot(r)
values(r) <- krig$var1.pred
raster_template <- rast(ext(krig), res=1)
r <- rasterize(krig, raster_template, "var1.pred")
plot(r)
m <- mask(r, site_bound)
st_crs(r)
st_crs(r) <- st_crs(site_bound)
crs(r) <- st_crs(site_bound)
crs(r) <- crs(site_bound)
m <- mask(r, site_bound)
plot(m)
writeRaster(m, "caldeiao_topo.tif")
df <- as.data.frame(m, xy = TRUE)
names(df) <- c("x", "y", "z")
model <- lm(z ~ poly(x, 2) + poly(y, 2), data = df)
df$trend <- predict(model, newdata = df)
df$detrended <- df$z - df$trend
detrended_raster <- m
values(detrended_raster) <- df$detrended
plot(detrended_raster)
df <- as.data.frame(r, xy = TRUE)
names(df) <- c("x", "y", "z")
model <- lm(z ~ poly(x, 2) + poly(y, 2), data = df)
df$trend <- predict(model, newdata = df)
df$detrended <- df$z - df$trend
detrended_raster <- r
values(detrended_raster) <- df$detrended
plot(detrended_raster)
setwd("projects/agro-transition-final/")
required_packages <- c(
"ape", "caret", "dplyr", "fastshap", "fields", "ggplot2", "gridExtra",
"latticeExtra", "progress", "randomForestSRC", "rasterVis", "RColorBrewer",
"rnaturalearth", "rnaturalearthdata", "sf", "sp", "shapviz", "terra",
"tidyterra", "vegan", "ggpubr", "ade4"
)
missing_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(missing_packages)) {
print("Installing dependencies...")
install.packages(missing_packages)
}
library(ape)
library(caret)
library(dplyr)
library(fastshap)
library(fields)
library(ggplot2)
library(gridExtra)
library(latticeExtra)
library(progress)
library(randomForestSRC)
library(rasterVis)
library(RColorBrewer)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(sp)
library(shapviz)
library(terra)
library(tidyterra)
library(vegan)
library(ggpubr)
library(ade4)  # Dependency for quickMEM
sf_use_s2(FALSE)
# please download the quickMEM source code from
# https://github.com/ajsmit/Quantitative_Ecology/blob/main/Num_Ecol_R_book_ed1/quickMEM.R
source("quickMEM.R")
source("var_names.R")
# ---------------------------------------------------------
# Data preparation
# Define datum
WGS84 <- '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'
# Mask the NA cells for plotting
bio <- rast("rasters/bioclim/bio01.asc")
alt <- rast("rasters/terrain/altitude.asc")
land_mask <- (!is.na(bio) & !is.na(alt))
# For the figures
coast <- st_union(ne_countries())
# Read data
raw_data <- read.csv("data/c14dates.csv")
all_data_points <- st_as_sf(raw_data, coords=c("Longitude", "Latitude"), crs=WGS84)
all_data_points <- all_data_points[order(all_data_points$AgeCalBP), ]
# Ages
age_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=AgeCalBP), size=0.5, alpha=0.5) +
scale_color_viridis_c(option="turbo", name="Age (cal BP)") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Ages.jpg", width=2000, height=1000, res=300)
plot(age_plot)
dev.off()
# Ages
age_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=AgeCalBP), size=0.5, alpha=0.5) +
scale_color_viridis_c(option="turbo", name="Age (cal BP)") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Ages.jpg", width=2000, height=1000, res=300)
plot(age_plot)
dev.off()
age_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=AgeCalBP), size=0.6, alpha=0.6) +
scale_color_viridis_c(option="turbo", name="Age (cal BP)") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Ages.jpg", width=2000, height=1000, res=300)
plot(age_plot)
dev.off()
# Ages
age_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=AgeCalBP), size=0.5, alpha=0.5, pch=16) +
scale_color_viridis_c(option="turbo", name="Age (cal BP)") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Ages.jpg", width=2000, height=1000, res=300)
plot(age_plot)
dev.off()
age_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=AgeCalBP), alpha=0.5, pch=16) +
scale_color_viridis_c(option="turbo", name="Age (cal BP)") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Ages.jpg", width=2000, height=1000, res=300)
plot(age_plot)
dev.off()
age_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=AgeCalBP), size=1, alpha=0.5, pch=16) +
scale_color_viridis_c(option="turbo", name="Age (cal BP)") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Ages.jpg", width=2000, height=1000, res=300)
plot(age_plot)
dev.off()
# Ages
age_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=AgeCalBP), size=0.5, alpha=0.5) +
scale_color_viridis_c(option="turbo", name="Age (cal BP)") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Ages.jpg", width=2000, height=1000, res=300)
plot(age_plot)
dev.off()
age_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=AgeCalBP), size=0.5, alpha=0.5) +
scale_color_viridis_c(option="turbo", name="Age (cal BP)") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Ages.jpg", width=4000, height=2000, res=300)
plot(age_plot)
dev.off()
age_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=AgeCalBP), size=0.5, alpha=0.5) +
scale_color_viridis_c(option="turbo", name="Age (cal BP)") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Ages.jpg", width=2000, height=1000, res=300)
plot(age_plot)
dev.off()
# Sources
all_data_points$Database[all_data_points$Database == ""] <- "Other source"
n <- length(unique(all_data_points$Database))
source_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=all_data_points, aes(col=Database), size=0.5, alpha=0.5) +
scale_color_manual(values = colorRampPalette(brewer.pal(8, "Set3"))(n)) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/C14Sources.jpg", width=2000, height=1000, res=300)
plot(source_plot)
dev.off()
data <- read.csv("saved_data/data.csv")
head(data)
jpeg("figs/SI_mem.jpg", width=2000, height=1600, res=300)
sink("results/mem.txt")
mem <- quickMEM(data$y, data[,c("xcoord", "ycoord")])
sink()
dev.off()
# Variation partitioning
terrain <- X[,paste(colnames(X), ".asc", sep="") %in% basename(terrain_files)]
# Store latitude and longitude for use later
xcoord <- data$xcoord
ycoord <- data$ycoord
# Predictors and target
X <- data[,1:(ncol(data)-3)]
y <- data$y
# Variation partitioning
terrain <- X[,paste(colnames(X), ".asc", sep="") %in% basename(terrain_files)]
bioclim_files <- list.files("rasters/bioclim", full.names=T)
soil_files <- list.files("rasters/edaphic", full.names=T)
terrain_files <- list.files("rasters/terrain", full.names=T)
# Variation partitioning
terrain <- X[,paste(colnames(X), ".asc", sep="") %in% basename(terrain_files)]
bioclim <- X[,paste(colnames(X), ".asc", sep="") %in% basename(bioclim_files)]
soil <- X[,paste(colnames(X), ".asc", sep="") %in% basename(soil_files)]
spatial <- data[,c("xcoord", "ycoord")]
v <- varpart(y, terrain, bioclim, soil, spatial)
jpeg("figs/SI_varpart.jpg", width=2000, height=1600, res=300)
plot(v, Xnames=c("Terrain", "Bioclim", "Soil", "Spatial"), bg=1:4)
dev.off()
# For random forest
data$event <- 1
load("saved_data/rf_model.RData")
rf_stack <- rast("saved_data/rf_stack.tif")
predicted_time_r <- rast("saved_data/predicted_time_r.tif")
# Random forest plots
rf_plot <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_spatraster(data=rf_stack) +
facet_wrap(~lyr) +
geom_sf(data=coast, fill="transparent") +
scale_fill_viridis_c(option="turbo", na.value="transparent", name="Probability") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/RForest.jpg", width=2000, height=1000, res=300)
plot(rf_plot)
dev.off()
# Predicted time
rf_pred <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_spatraster(data=predicted_time_r) +
geom_sf(data=coast, fill="transparent") +
scale_fill_viridis_c(option="turbo", na.value="transparent", name="Predicted yr BP") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/RForestPred.jpg", width=2000, height=1000, res=300)
plot(rf_pred)
dev.off()
# Predicted time
rf_pred <- ggplot() +
geom_sf(data=coast, fill="white") +
geom_spatraster(data=predicted_time_r) +
geom_sf(data=coast, fill="transparent") +
scale_fill_viridis_c(option="turbo", na.value="transparent", name="Predicted BP") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90))
jpeg("figs/RForestPred.jpg", width=2000, height=1000, res=300)
plot(rf_pred)
dev.off()
colnames(xvars) <- var_names[colnames(xvars)]
xvars <- select(data, -c(y, event))
colnames(xvars) <- var_names[colnames(xvars)]
colnames(explainer) <- colnames(xvars)
load("saved_data/explainer.RData")
shv <- shapviz(explainer, X=xvars)
sv_importance(shv, max_display=10, kind="beeswarm", size=0.5, alpha=0.5) +
scale_color_gradient(low="blue", high="red")
jpeg("figs/ShapSummary.jpg", width=2000, height=1000, res=300)
sv_importance(shv, max_display=10, kind="beeswarm", size=0.5, alpha=0.5) +
scale_color_gradient(low="blue", high="red")
dev.off()
jpeg("figs/ShapSummary.jpg", width=2000, height=1000, res=300)
sv_importance(shv, max_display=10, kind="beeswarm", size=0.5, alpha=0.5) +
scale_color_gradient(low="cornflowerblue", high="brown1")
dev.off()
jpeg("figs/ShapSummary.jpg", width=2000, height=1000, res=300)
sv_importance(shv, max_display=10, kind="beeswarm", size=0.5, alpha=0.5) +
scale_color_viridis(option="turbo")
jpeg("figs/ShapSummary.jpg", width=2000, height=1000, res=300)
sv_importance(shv, max_display=10, kind="beeswarm", size=0.5, alpha=0.5) +
scale_color_viridis:c(option="turbo")
jpeg("figs/ShapSummary.jpg", width=2000, height=1000, res=300)
sv_importance(shv, max_display=10, kind="beeswarm", size=0.5, alpha=0.5) +
scale_color_viridis_c(option="turbo")
dev.off()
jpeg("figs/ShapSummary.jpg", width=2000, height=1000, res=300)
sv_importance(shv, max_display=10, kind="beeswarm", size=0.5, alpha=0.5) +
scale_color_gradient(low="blue", high="red")
dev.off()
top_vars <- names(sort(apply(abs(explainer), 2, mean), decreasing=T))
top_vars <- top_vars[top_vars != "Longitude" & top_vars != "Latitude"]
shap_scores_df <- as.data.frame(explainer)
shap_scores_df$xcoord <- data$xcoord
shap_scores_df$ycoord <- data$ycoord
shap_points <- st_as_sf(shap_scores_df, coords=c("xcoord", "ycoord"), crs=WGS84)
# Spatial distribution of Shapley values
shap_maps <- lapply(1:4, function(i) {
shap_points_ordered <- shap_points %>% arrange(get(top_vars[i]))
ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=shap_points_ordered, aes(color=get(top_vars[i])), size=0.5, alpha=0.5) +
scale_color_viridis_c(option="turbo", name="Shapley value") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90)) +
labs(title=top_vars[i]) +
theme(
plot.title = element_text(
size = 10,
hjust = 0.5
),
legend.title = element_text(size=8)
)
})
# do.call(grid.arrange, shap_maps)
ggarrange(plotlist=shap_maps, common.legend=TRUE, legend="right")
dev.off()
jpeg("figs/ShapMaps.jpg", width=2000, height=1000, res=300)
# do.call(grid.arrange, shap_maps)
ggarrange(plotlist=shap_maps, common.legend=TRUE, legend="right")
dev.off()
# Spatial distribution of Shapley values
shap_maps <- lapply(1:4, function(i) {
shap_points_ordered <- shap_points %>% arrange(get(top_vars[i]))
ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=shap_points_ordered, aes(color=get(top_vars[i])), size=0.4, alpha=0.5) +
scale_color_viridis_c(option="turbo", name="Shapley value") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90)) +
labs(title=top_vars[i]) +
theme(
plot.title = element_text(
size = 10,
hjust = 0.5
),
legend.title = element_text(size=8)
)
})
jpeg("figs/ShapMaps.jpg", width=2000, height=1000, res=300)
# do.call(grid.arrange, shap_maps)
ggarrange(plotlist=shap_maps, common.legend=TRUE, legend="right")
dev.off()
# Spatial distribution of Shapley values
shap_maps <- lapply(1:4, function(i) {
shap_points_ordered <- shap_points %>% arrange(get(top_vars[i]))
ggplot() +
geom_sf(data=coast, fill="white") +
geom_sf(data=shap_points_ordered, aes(color=get(top_vars[i])), size=0.2, alpha=0.5) +
scale_color_viridis_c(option="turbo", name="Shapley value") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
coord_sf(ylim = c(-60, 90)) +
labs(title=top_vars[i]) +
theme(
plot.title = element_text(
size = 10,
hjust = 0.5
),
legend.title = element_text(size=8)
)
})
jpeg("figs/ShapMaps.jpg", width=2000, height=1000, res=300)
# do.call(grid.arrange, shap_maps)
ggarrange(plotlist=shap_maps, common.legend=TRUE, legend="right")
dev.off()
dependence_plots <- lapply(1:4, function(i) {
sv_dependence(shv, v=top_vars[i], size=0.5, alpha=0.5) +
scale_color_gradient(low="blue", high="red") +
# change y labels to "Shapley value"
labs(y="Shapley value")
})
# Dependence plots
jpeg("figs/ShapDependence.jpg", width=2500, height=1800, res=300)
# sv_dependence(shv, v=top_vars[1:4])
ggarrange(plotlist=dependence_plots, common.legend=TRUE, legend="right")
dev.off()
# Dependence plots
jpeg("figs/ShapDependence.jpg", width=2000, height=1500, res=300)
# sv_dependence(shv, v=top_vars[1:4])
ggarrange(plotlist=dependence_plots, common.legend=TRUE, legend="right")
dev.off()
dependence_plots <- lapply(1:4, function(i) {
sv_dependence(shv, v=top_vars[i], size=0.6, alpha=0.5) +
scale_color_gradient(low="blue", high="red") +
# change y labels to "Shapley value"
labs(y="Shapley value")
})
# Dependence plots
jpeg("figs/ShapDependence.jpg", width=2000, height=1500, res=300)
# sv_dependence(shv, v=top_vars[1:4])
ggarrange(plotlist=dependence_plots, common.legend=TRUE, legend="right")
dev.off()
names(rf_model$importance) <- var_names[names(rf_model$importance)]
jpeg("figs/SI_RF.jpg", width=3000, height=2000, res=300)
plot(rf_model)
dev.off()
load("saved_data/rf_model.RData")
names(rf_model$importance) <- var_names[names(rf_model$importance)]
jpeg("figs/SI_RF.jpg", width=3000, height=2000, res=300)
plot(rf_model)
dev.off()
load("saved_data/rf_model.RData")
jpeg("figs/SI_RF.jpg", width=3000, height=2000, res=300)
plot(rf_model)
dev.off()
